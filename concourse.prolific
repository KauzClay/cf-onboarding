Deploy Concourse with BOSH

### What?
[Concourse](https://concourse-ci.org/) is a Pivotal-sponsored, pipeline-based, continuous integration and deployment (CI/CD) system. The "pipelines" are a collection of three core concepts: [jobs](https://concourse-ci.org/jobs.html), [tasks](https://concourse-ci.org/tasks.html), and [resources](https://concourse-ci.org/resources.html). You'll learn more about these in upcoming stories. While CI may call to mind test automation, Pivotal teams use it for so much more than that. Take a stroll around the office and check out the jobs up on the CI screens to get a general idea of how broadly we use it to automate all that is automate-able.

### How?
Even though you already have your IaaS and BOSH Director set up, we're going to have  a hard time re-using them for your Concourse deployment. The primary impediment is that `bbl` only supports one set of load balancers (either CF or Concourse) at a time. We _could_ try to finagle our Concourse deployment into our existing BOSH setup, but to keep things simple, we're just going to create a second VPC, BOSH Director, and load balancer for our Concourse deployment.

**Set up your second BOSH Director**
1. Set up a new bbl-state directory. If you're already the `bbl-state` directory that you made for deploying CF:
  ```
  cd ..
  mkdir bbl-state-concourse
  cd bbl-state-concourse
  ```
1. Run the following command to create your "bbl plan":
  ```
  bbl plan \
    --iaas gcp \
    --gcp-service-account /path/to/service_account_key.json \
    --gcp-region us-central1 \
    --lb-type concourse
  ```
1. Put your plan into effect:
  ```
  bbl up \
    --iaas gcp \
    --gcp-service-account /path/to/service_account_key.json
  ```

**BOSH deploy Concourse**
1. Clone `concourse-bosh-deployment`:
  ```
  git clone git@github.com:concourse/concourse-bosh-deployment
  ```
1. Jump into the `cluster/` directory. There are a few different ways to deploy Concourse with BOSH; we want to use the full cluster (as opposed to bosh-lite):
  ```
  cd concourse-bosh-deployment/cluster
  ```
1. Fetch the URL for your Concourse. All external traffic to Concourse goes through the load balancer you just created with `bbl`. Therefore, when you try to access Concourse in your browser, you'll need to access it using your load balancer IP. Query `bbl` for that address:
  ```
  bbl lbs
  ```
1. Run the following command to deploy Concourse (this command was largely cribbed from [this doc in the `bbl` repo](https://github.com/cloudfoundry/bosh-bootloader/blob/master/docs/concourse.md#steps)):
  ```
  bosh deploy -d concourse concourse.yml \
    -l ../versions.yml \
    --vars-store cluster-creds.yml \
    -o operations/no-auth.yml \
    -o operations/privileged-http.yml \
    -o operations/privileged-https.yml \
    -o operations/tls.yml \
    -o operations/tls-vars.yml \
    -o operations/web-network-extension.yml \
    --var network_name=default \
    --var external_url="https://$LOAD_BALANCER_IP" \
    --var web_vm_type=default \
    --var db_vm_type=default \
    --var db_persistent_disk_type=10GB \
    --var worker_vm_type=default \
    --var deployment_name=concourse \
    --var web_network_name=private \
    --var web_network_vm_extension=lb
  ```

**Open Concourse in your browser**
Now that you've got everything deployed, navigate to `https://$LOAD_BALANCER_IP` in your browser. Because we're using untrusted certificates, your browswer is likely to throw up a warning page that you're about to navigate to a dangerous site. Most browsers give you the option to move forward anyway. For example, if you're using Chrome, click the "Advanced" link, and then you should be able to proceed.

### Troubleshooting
1. Did you remember to set the `external_url` paramter to your load balancer IP?
1. Did you remember to add the `https://` scheme to your external url?
1. Double-check that you're visiting the `https://` address in your browser.
1. Try `bosh ssh`ing into your web VM and curling localhost. It should return the html for your pipeline-less Concourse webpage. If it does, then your problem is with routing/DNS, not with Concourse itself.
1. If you hit an IP quota, go to Home > IAM & Admin > Quotas in your GCP dashboard and click the ✏  button. This will take you to a form where you can request an increased quota.
1. If this ends up being frustrating in a "please, please don't make me do another minute" kind of way, no sweat. Don't waste time on a story you're not getting anything out of, just _Choose Your Own Adventure_ your way out of it by **[spinning up a local VM with `bosh create-env` and VirtualBox](https://github.com/concourse/concourse-bosh-deployment/blob/master/lite/README.md)**. Either way, same result →

### Expected Result
![Lonely Concourse, no pipelines](http://engineering.pivotal.io/images/concourse-000/no_pipelines.png)

### Resources
[Terraform + Google Cloud Platform docs](https://www.terraform.io/docs/providers/google/index.html)
[Concourse Architecture Overview](https://concourse-ci.org/concepts.html)
[All About Concourse for Continuous Integration (video)](https://blog.pivotal.io/pivotal-perspectives/features/all-about-concourse-for-continuous-integration)
[BOSH 2.0: The Evolution - YouTube (video)](https://www.youtube.com/watch?v=Q5uvoL1OqSw)
[YAML Validator](http://codebeautify.org/yaml-validator)

### Relevant Repos and Teams
**Concourse:** [concourse/concourse](https://github.com/concourse/concourse)
L: concourse

---

**Extra Credit**: Give your Concourse a domain

### What?
You just set up your Concourse deployment with BOSH, but to use it in your browser you have to use a raw IP address. Janky.

Let's use our new knowledge about DNS to make a pretty domain for our new Concourse deployment.

### How?
First, you're going to configure DNS in the GCP web console. So, start by going to the "Cloud DNS" service in GCP. There, you should see a single DNS "zone", and the "DNS name" column should match the domain you made for CF.

If you click through to your DNS zone, you'll see a button called "Add record set". Let's do that.

The GCP console will automatically populate the tail end of your DNS name (hint: it will be the same base domain as your entire zone); all you have to do for that field is choose the subdomain for your Concourse. How about... `concourse`? The other thing you need to configure is the IP address that your domain will resolve to; that needs to match the IP address of your Concourse load balancer. Paste that value in and save. Then wait a minute or two to let the DNS configuration propagate.

### Expected Result
You can enter your new `concourse.XYZ` domain into your browswer and end up on your Concourse pipeline. You'll still need to click through Chrome's warning that the site isn't safe.

L: concourse

---

Download and hook up your Concourse CLI

### What?
Now that you have Concourse deployed, the first thing you'll want to do is download the `fly` CLI and authenticate with your target. This is done with the `fly login` command. The login command serves double duty: it authenticates with a given endpoint  and saves it under a more convenient name. The name and token are stored in ~/.flyrc (though you shouldn't really edit the file manually).

### How?
1. Download the `fly` CLI from the "no pipelines configured" page.
1. Move it to your computer's $PATH and make it executable.
1. Run `fly login --help` for instructions to login to Concourse. Since we provided the `no-auth.yml` ops-file in our deploy command, you won't actually need to provide any credentials to log in.

### Expected Result
You successfully enter your credentials and the CLI prints "target saved."

### Resources
[Fly login documentation](https://concourse-ci.org/fly.html#fly-login)

### Relevant Repos and Teams
[concourse/fly](https://github.com/concourse/fly)
L: concourse

---

Create a pipeline with a single job

### What?
Every great Concourse behemoth of the 21st century started in the same place as yours is about to: with an empty `pipeline.yml`. You can kick it off with as little as a single, manually-triggered job.

### How?
1. Set up a `jobs:` section in your `pipeline.yml`.
1. Define a **[job](https://concourse-ci.org/jobs.html)** with a name and a [plan](https://concourse-ci.org/jobs.html#job-plan).
1. Give the job [a task](https://concourse-ci.org/jobs.html) that you [configure inline](https://concourse-ci.org/task-step.html#config), in the pipeline itself (this is good to know how to do to test new configurations quickly).
1. Use [this doc about task configuration](https://concourse-ci.org/tasks.html) to set up a basic task that prints out "Hello world." Make sure to include the `platform`, `image_resource`, and `run` sections. For the `image_resource` section, you can probably use the [busybox docker image](https://hub.docker.com/_/busybox/). If you need more help, take a look at [this example for configuring an inline task](https://gist.github.com/dsabeti/63caef81d5294b761bf92f5a7ebf70bd).
1. "fly" your pipeline using the `fly` CLI.

### Expected Result
A job that always goes green. How idyllic.

### Resources
[Configuring a Job](https://concourse-ci.org/jobs.html)
[Pipeline Mechanics](https://concourse-ci.org/pipelines.html)
[Build Plans](https://concourse-ci.org/jobs.html#job-plan)
L: concourse

---

Add a Git resource to the pipeline

### What?
A  **[resource](https://concourse-ci.org/resources.html)** is any entity that can be checked for new versions, pulled down at a specific version, and/or pushed up to idempotently create new versions. A few of the usual suspects are [listed here](https://concourse-ci.org/included-resources.html). They include a number of ideas that you're used to thinking of in terms of versioning (`git resource`, `git-release resource`, `tracker resource`, etc.), but also a few that you might not be, like `time`.

The [`git resource`](https://github.com/concourse/git-resource) tracks the commits in a git repository and, though I have no numbers on this, I expect it's the most commonly used Concourse resource. And you can have one of your very own!

In the previous story, you defined a task "in-line" -- meaning, directly in your pipeline configuration. That probably made sense when you were writing a simple "Hello world" script, but as you build more complex tasks -- [like this task for run `bbl up`](https://github.com/cloudfoundry/cf-deployment-concourse-tasks/tree/master/bbl-up) -- you'll want to save those tasks in a git repo, and then use a resource to pull down those scripts for your pipeline.

### How?
Create a repo to house your Concourse code (`pipeline.yml` etc.) and set up a [git resource](https://github.com/concourse/git-resource) that fetches it. If you need one ASAP, go ahead and borrow [our workspace repo](https://github.com:pivotal-cf-experimental/cf-onboarding-workspace). Just create a new directory in that repo with your name so you don't collide with another pair.

The first thing you'll want to do is create a Bash or Ruby script to capture your logic. Then, you'll need to define your task interface in a `task.yml`. You can find the task interface definition [in this Concourse doc](https://concourse-ci.org/tasks.html). Hint: check out the "Examples" column on the right for more help.

Finally, we're gonna update the `pipeline.yml` to include our new git-resource, configure our job to pull down the repo by using a `get` step, and then use the `task.yml` and script in that resource to run our task.
1. Use the examples [on this page](https://concourse-ci.org/resource-types.html) to see how resource_types and resources are configured in a pipeline. Since the git-resource is pre-packaged with Concourse, you won't have to define the `resource_type` for it, but you will need to define the specific instance of the `resource` you want to use.
1. Follow the [`get` step docs](https://concourse-ci.org/get-step.html) to have your job pull down the git repo.
1. Configure your task to use [a file-based configuration](https://concourse-ci.org/task-step.html#file) rather than in-line configuration.

### Expected Result
A one job, one resource pipeline that is always green.

### Resources
[Pipeline Mechanics](https://concourse-ci.org/pipelines.html)
[Implementing your own resource](https://concourse-ci.org/implementing-resources.html)
[Concourse "resources"](https://concourse-ci.org/resources.html)
L: concourse

---

Add a docker-image resource to the pipeline

### What?
Another popular Concourse resource is the **[`docker-image` resource](https://github.com/concourse/docker-image-resource)**. It's useful for providing a reproducible environment for your tests and builds with all of the dependencies a growing pipeline needs to succeed.

### How?
1. Write a simple Dockerfile.
1. Upload it to the DockerHub registry (if you do not have an account, create one at this point).
1. Set up the `docker-image` resource to fetch it.
1. Use it as the [image resource](https://concourse-ci.org/task-environment.html) in your task.

### Resources
[Docker-image resource repo](https://github.com/concourse/docker-image-resource)
[Get Started with Docker](https://docs.docker.com/get-started/)
- [ ] Create DockerFile
L: concourse

---

[RELEASE] Concourse ⇧


