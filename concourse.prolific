Set up a local Concourse using Docker Compose

### What?
[Concourse](https://concourse-ci.org/) is a Pivotal-sponsored, pipeline-based, continuous integration and deployment (CI/CD) system. The "pipelines" are a collection of three core concepts: [jobs](https://concourse-ci.org/jobs.html), [tasks](https://concourse-ci.org/tasks.html), and [resources](https://concourse-ci.org/resources.html). You'll learn more about these in upcoming stories. While CI may call to mind test automation, Pivotal teams use it for so much more than that. Take a stroll around the office and check out the jobs up on the CI screens to get a general idea of how broadly we use it to automate all that is automate-able.

In this story, we're going to use a tool called [Docker Compose](https://docs.docker.com/compose/overview/) to set up Concourse in local docker containers. (Most engineering teams at Pivotal use BOSH and [concoruse-bosh-deployment](https://github.com/concourse/concourse-bosh-deployment) to set up their Concourse for CI. However, it's a much longer process and we'd rather jump straight to some cool Concourse concepts.)

### How?
Our friends at Start & Wayne actually have a pretty good Concourse tutorial. We'll start by using their documentation for setting up your local Concourse.

Open https://concoursetutorial.com/#getting-started in your broswer and start there. Just in case you wanna know the outline, here's what youre going to do:
1. Install [Docker](https://www.docker.com/community-edition#/download) and [Docker Compose](https://docs.docker.com/compose/install/)
2. Download the Concourse team's pre-packaged Docker Compose YAML configuration:
  ```
  wget https://concourse-ci.org/docker-compose.yml
  ```
3. Use Docker Compose to start up your local Concourse in docker containers:
  ```
  docker-compose up -d
  ```

**Open Concourse in your browser**
Now that you've got everything set up, navigate to `http://127.0.0.1:8080` in your browser.

### Expected Result
![Lonely Concourse, no pipelines](http://engineering.pivotal.io/images/concourse-000/no_pipelines.png)

### Resources
[Concourse Architecture Overview](https://concourse-ci.org/concepts.html)
[All About Concourse for Continuous Integration (video)](https://blog.pivotal.io/pivotal-perspectives/features/all-about-concourse-for-continuous-integration)
[YAML Validator](http://codebeautify.org/yaml-validator)

### Relevant Repos and Teams
**Concourse:** [concourse/concourse](https://github.com/concourse/concourse)
L: concourse

---

Download and hook up your Concourse CLI

### What?
Now that you have Concourse deployed, the first thing you'll want to do is download the `fly` CLI and authenticate with your target. This is done with the `fly login` command. The login command serves double duty: it authenticates with a given endpoint  and saves it under a more convenient name. The name and token are stored in ~/.flyrc (though you shouldn't really edit the file manually).

### How?
1. Download the `fly` CLI from the "no pipelines configured" page.
1. Move it to your computer's $PATH and make it executable.
1. Run `fly login --help` for instructions to login to Concourse. Since we provided the `no-auth.yml` ops-file in our deploy command, you won't actually need to provide any credentials to log in.

### Expected Result
You successfully enter your credentials and the CLI prints "target saved."

### Resources
[Fly login documentation](https://concourse-ci.org/fly.html#fly-login)

### Relevant Repos and Teams
[concourse/fly](https://github.com/concourse/fly)
L: concourse

---

Create a pipeline with a single job

### What?
Every great Concourse behemoth of the 21st century started in the same place as yours is about to: with an empty `pipeline.yml`. You can kick it off with as little as a single, manually-triggered job.

### How?
1. Set up a `jobs:` section in your `pipeline.yml`.
1. Define a **[job](https://concourse-ci.org/jobs.html)** with a name and a [plan](https://concourse-ci.org/jobs.html#job-plan).
1. Give the job [a task](https://concourse-ci.org/jobs.html) that you [configure inline](https://concourse-ci.org/task-step.html#config), in the pipeline itself (this is good to know how to do to test new configurations quickly).
1. Use [this doc about task configuration](https://concourse-ci.org/tasks.html) to set up a basic task that prints out "Hello world." Make sure to include the `platform`, `image_resource`, and `run` sections. For the `image_resource` section, you can probably use the [busybox docker image](https://hub.docker.com/_/busybox/). If you need more help, take a look at [this example for configuring an inline task](https://gist.github.com/dsabeti/63caef81d5294b761bf92f5a7ebf70bd).
1. "fly" your pipeline using the `fly` CLI.

### Expected Result
A job that always goes green. How idyllic.

### Resources
[Configuring a Job](https://concourse-ci.org/jobs.html)
[Pipeline Mechanics](https://concourse-ci.org/pipelines.html)
[Build Plans](https://concourse-ci.org/jobs.html#job-plan)
L: concourse

---

Add a Git resource to the pipeline

### What?
A  **[resource](https://concourse-ci.org/resources.html)** is any entity that can be checked for new versions, pulled down at a specific version, and/or pushed up to idempotently create new versions. A few of the usual suspects are [listed here](https://concourse-ci.org/included-resources.html). They include a number of ideas that you're used to thinking of in terms of versioning (`git resource`, `git-release resource`, `tracker resource`, etc.), but also a few that you might not be, like `time`.

The [`git resource`](https://github.com/concourse/git-resource) tracks the commits in a git repository and, though I have no numbers on this, I expect it's the most commonly used Concourse resource. And you can have one of your very own!

In the previous story, you defined a task "in-line" -- meaning, directly in your pipeline configuration. That probably made sense when you were writing a simple "Hello world" script, but as you build more complex tasks -- [like this task for run `bbl up`](https://github.com/cloudfoundry/cf-deployment-concourse-tasks/tree/master/bbl-up) -- you'll want to save those tasks in a git repo, and then use a resource to pull down those scripts for your pipeline.

### How?
Create a repo to house your Concourse code (`pipeline.yml` etc.) and set up a [git resource](https://github.com/concourse/git-resource) that fetches it. If you need one ASAP, go ahead and borrow [our workspace repo](https://github.com:pivotal-cf-experimental/cf-onboarding-workspace). Just create a new directory in that repo with your name so you don't collide with another pair.

The first thing you'll want to do is create a Bash or Ruby script to capture your logic. Then, you'll need to define your task interface in a `task.yml`. You can find the task interface definition [in this Concourse doc](https://concourse-ci.org/tasks.html). Hint: check out the "Examples" column on the right for more help.

Finally, we're gonna update the `pipeline.yml` to include our new git-resource, configure our job to pull down the repo by using a `get` step, and then use the `task.yml` and script in that resource to run our task.
1. Use the examples [on this page](https://concourse-ci.org/resource-types.html) to see how resource_types and resources are configured in a pipeline. Since the git-resource is pre-packaged with Concourse, you won't have to define the `resource_type` for it, but you will need to define the specific instance of the `resource` you want to use.
1. Follow the [`get` step docs](https://concourse-ci.org/get-step.html) to have your job pull down the git repo.
1. Configure your task to use [a file-based configuration](https://concourse-ci.org/task-step.html#file) rather than in-line configuration.

### Expected Result
A one job, one resource pipeline that is always green.

### Resources
[Pipeline Mechanics](https://concourse-ci.org/pipelines.html)
[Implementing your own resource](https://concourse-ci.org/implementing-resources.html)
[Concourse "resources"](https://concourse-ci.org/resources.html)
L: concourse

---

Add a docker-image resource to the pipeline

### What?
Another popular Concourse resource is the **[`docker-image` resource](https://github.com/concourse/docker-image-resource)**. It's useful for providing a reproducible environment for your tests and builds with all of the dependencies a growing pipeline needs to succeed.

### How?
1. Write a simple Dockerfile.
1. Upload it to the DockerHub registry (if you do not have an account, create one at this point).
1. Set up the `docker-image` resource to fetch it.
1. Use it as the [image resource](https://concourse-ci.org/task-environment.html) in your task.

### Resources
[Docker-image resource repo](https://github.com/concourse/docker-image-resource)
[Get Started with Docker](https://docs.docker.com/get-started/)
- [ ] Create DockerFile
L: concourse

---

[RELEASE] Concourse â‡§


