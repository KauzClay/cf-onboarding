Create a Redis BOSH Release

### What?
Okay, the training wheels are coming **off**. This BOSH Release is gonna be you + the same docs anyone else uses ("whhaaaaaat?" "I know, they grow up so fast!"). But first, a little preamble:

A BOSH release is a versioned collection of configuration properties, configuration templates, start up scripts, source code, binary artifacts, and anything else required to *build and deploy software in a reproducible way*. Each BOSH VM starts with a [stemcell](http://bosh.io/docs/stemcell.html), and then has utility added to it in the form of releases. Your Redis release might include start-up and shutdown scripts for the redis-server, a tarball with Redis source code obtained from the Redis official website, and configuration properties allowing cluster operators to alter that Redis configuration.

### How?
Follow [these instructions](http://bosh.io/docs/create-release.html) and refer to [this MySQL release](https://github.com/cloudfoundry/cf-mysql-release) as an example. If you get totally stuck, refer to this [community-created Redis release](https://github.com/cloudfoundry-community/redis-boshrelease).

### Expected Result
A BOSH release that facilitates the use of Redis by a CF deployed app.

### Resources
[http://bosh.io/docs/create-release.html](http://bosh.io/docs/create-release.html)
L: bosh

---

Create a Concourse resource

### What?
As we've seen, a [Concourse resource](http://concourse.ci/concepts.html#resources) can be checked for new versions, used as a trigger when new versions are found, pulled down at a specific version, and pushed up idempotently to create new versions.

There's a whole host of [system resource types](https://concourse.ci/resource-types.html) available, but they don't cover every potential use case. It won't be too long till you'll need to create one of your very own.

### How?
Use the **[Concourse documentation](https://concourse.ci/implementing-resources.html)** to create your own resource. Make liberal use of resource repos on Github to guide you on your path. Your steps will broadly be:

1. Write check / in / out scripts that make sense for your resource.
1. Package in a Docker container and publish to the docker registry.
1. Configure your pipeline to include your new resource type, create an instance of that resource type, and consume that resource.
1. Lots of debugging, with poor feedback mechanisms.

**Debugging Note:** write errors to `stderr` because `stdout` must be only a JSON object.

### Expected Result
A resource that can be used as a trigger for a job in your pipeline. To date, my favorite combinations of resources/tasks have been:
* an XKCD notifier
* a bot that spammed a Slack channel with vocabulary from a Danish thesaurus

Let's get creative!

### Resources
[Docs / Github : List of resource types and links to their implementation](https://concourse.ci/resource-types.html)
L: bosh

---

Make a BOSH release

### What?
Create a BOSH release of an app (e.g.: a simple NginX app or of your choosing )

### Expected Result
Have a VM running your application code on it's own VM released and managed by BOSH, and be able to scale it by editing the YAML.

### Resources
https://bosh.io/docs/create-release.html
https://bosh.io/docs/packages.html
https://starkandwayne.com/blog/your-first-bosh-release/
https://content.pivotal.io/blog/how-to-create-a-bosh-release-of-a-dns-server

---

Make a BOSH Errand

### What?
Create a BOSH errand a task that can be triggered via bosh ( run specific set of tests )

### Expected Result
Be able to run `bosh -d <your cf> errands` and have your errand run.

### Resources
https://bosh.io/docs/errands.html

---

Create a tile to deploy with Ops Manager

### Resources
- https://docs.pivotal.io/tiledev/2-2/
- https://docs.pivotal.io/tiledev/2-2/tile-structure.html
- https://docs.pivotal.io/tiledev/2-2/tile-generator.html

---

Deploy Ops Manager

### What?
Ops Manager is a GUI application that streamlines deploying subsequent software to the cloud via BOSH.
- Ops Manager represents PCF products as tiles with multiple configuration panes that let you input or select configuration values needed for the product.
- Ops Manager generates BOSH manifests containing the user-supplied configuration values, and sends them to the Director.
- After you install Ops Manager and BOSH, you use Ops Manager to deploy almost all PCF products.

### Ops Manager Interface
[Understand how an Operator uses Ops Manager](https://docs.pivotal.io/pivotalcf/2-2/customizing/pcf-interface.html)

## Deploying on GCP
While we use BOSH to deploy a director and many of our services, Ops Manager is currently not deployed with BOSH.

The first step to installing Ops Manager is to set up your infrastructure.
There are some terraform scripts that will do this for you that you can download from Pivotal Network.
Go to [network.pivotal.io](https://network.pivotal.io) and make sure you're signed in to PivNet (if you don't have an account yet, click "Register" to create one.).
Next, search for `Pivotal Application Service`. Once you open the product, you should see GCP Terraform templates in "Release Download Files".

Unzip the file to get the terraform templates. You can take a look at the README to see how the whole repo works, but the important bit is in the section titled "Var File". Use those instructions to build a var file for terraform. **Take care to notice some of the following gotcha's.**
1. The `project` variable needs to equal the ID of your GCP project. That's not the same thing as the _name_ of your GCP project. To find the ID, click on the project dropdown to the left of the search bar. You should say a table mapping project names to project IDs.
2. The `opsman_image_url` bears some explanation. As it's name implies, it's a URL to an OpsMan image. In the GCP case specifically, that means tha the OpsManager team has already uploaded an image in a global GCP bucket, so all you need to do is point your terraform templates at the right image. To construct the URL, you'll first need to know that all buckets have a URL of the form `https://storage.googleapis.com/<bucket name>/<file name>`. To find the bucket and file name, you'll want to find the "Pivotal Cloud Foundry Operations Manager" product on PivNet, and then download "Ops Manager for GCP". Surprise! What you actually got was a PDF that includes the bucket and file name. Note that there are different buckets for different regions -- pick the one that makes the most sense. You can test your url by running `curl --head URL` -- if you get a 200, you're in good shape.
3. `sevice_account_key` needs to contain your GCP credentials. You'll actually paste the contents of the service account key file (probably called `service-account.key.json` if you've already done the OSS GCP onboarding epic) into the var file. Make sure to keep the `<<SERVICE_ACCOUNT_KEY` and `SERVICE_ACCOUNT_KEY` tokens, as those designate the beginning and end of the creds.
4. `dns_suffix` is like the `system_domain` from the OSS GCP track -- it should be some subdomain of `onboarding.cf-app.com` and is used to represent your particular environment.
5. For SSL configuration, let's use self-signed certificates. That means you'll set values for `ssl_cert` and `ssl_private_key`. To generate SSL keys, run `openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -nodes`. When you generate the certificates, make sure that the "Common Name" field matches your `dns_suffix`.
6. Leave `buckets_location`, `opsman_storage_bucket_count`, `create_iam_service_account_members` blank.

Finially, you'll run
```
terraform init
terraform apply
```

Terraform will not only pave your IaaS for you -- it will also deploy the OpsMan VM for you. However, before you can use the provided domain to access OpsMan, you need to do one last manual DNS hookup:
1. In the "Cloud DNS" tab in the GCP console, click on the zone that matches your full OpsMan domain.
2. You should see an `NS` record with four domains in the `Data` field. Copy them.
3. Go back to the "Cloud DNS" and navigate to the zone that matches your DNS suffix (it should look like `<env-name>.<project-name>.cf-app.com`).
4. Add a record set. It should be an `NS` record, you'll need to add each of the four domains you copied as a new name server.
5. Test that it works by running `nslookup pcf.<env_name>.<dns_suffix>`. If it returns an IP address, you've successfully set up DNS.

Congrats! You've got OpsManager up and running.

Before you can use it, you need to configure authentication. Your best bet is to use "Internal Authentication." Create a user with whichever useername, password, and decryption passphrase you want (you can leave the http proxy information blank).

### Expected Results
OpsManager is running and you can log in.

### Relevant Teams
- #ops-manager Slack
- #pas-releng Slack

### Resources
- https://docs.pivotal.io/pivotalcf/2-2/customizing/

L: opsman

---

Deploy BOSH Director using Ops Manager

Configure the BOSH GCP tile using this [guide](https://docs.pivotal.io/pivotalcf/2-2/customizing/gcp-om-config.html). Some tips to keep you from getting stuck:
1. When you get to "Create Availability Zones", you'll want to use the same AZs that you specified in your terraform.
2. Make sure to read in the instructions carefully when you configure the networks. Especially be careful when setting the network names: they have the form `<network-name>/<subnet-name>/<region>`

After you've configured the BOSH Director tile (it should be green to indicate that you're finished configuring the tile), you can visit the **Review Pending Changes** page and click **Apply Changes**. You'll see the same logs as if you used `bbl` or the `bosh` CLI.
Once the deployment is done, you can visit `/change_log` to review the logs of past deployment.

After the deploy succeeds, click around and see if you can information about the BOSH Director's health. Can you the BOSH Director IP address? How much memory/disk/CPU it's using?

### Expected Results
OpsMan successfully deploys a BOSH Director.

### Resources
- https://docs.pivotal.io/pivotalcf/2-2/customizing/ops-man.html

L: opsman

---

Deploy some tiles

## What?
OpsManager uses "tiles" to deploy different products. You can find tiles by searching on [PivNet](https://network.pivotal.io). Then you can download them, upload them to your OpsManager, and finally configure and deploy them.

Some tiles have dependencies on other tiles. You should find information about that in the product description on PivNet.

To understand the workflow of an actual PCF/OpsMan customer, choose a tile or two to install and follow the appropriate docs.

## How?
Let's start by installing the mother of them all: PAS. Go to PivNet, search for "Pivotal Application Service", and download the "Small Footprint PAS" -- we'll use this to save some time during the deploy. Your best bet is to choose the latest stable version (avoid releases with `alpha` or `rc` in it).

And yes, the file is rather large (as of this writing, it's 13 GB), so feel free to take a ping pong break while it's downloading.

Use the official docs as guide to configure and deploy PAS. You can the docs for PAS 2.3 [here](https://docs.pivotal.io/pivotalcf/2-3/customizing/gcp-er-config.html), but if you're using a new version than that, you can use the dropdown next to "Pivotal Cloud Foundry" to find docs for the appropriate version.

## Expected Result
You've got a running PAS.

L: opsman

---

Container networking

### What?
Explore how and why of container to container networking.

### Resources
https://github.com/cloudfoundry/cf-networking-notes
https://github.com/cloudfoundry/cf-networking-release
https://docs.cloudfoundry.org/concepts/understand-cf-networking.html
https://docs.cloudfoundry.org/devguide/deploy-apps/cf-networking.html

---

Deploy, scale and tune an app on PWS

### What?

Get to kick the tires as a user of what PWS can offer. Deploy an app, scale it, benchmark it and view it's metrics by using all the tools that PWS puts at your disposal.

1. AppsManager
1. Metrics
1. AutoScaling
1. and more!

---

Deploy CFCR

### What?

Deploy CF flavored Kubernetes, with the aide of BOSH.

### Resources
https://www.cloudfoundry.org/container-runtime/
https://github.com/cloudfoundry/docs-cfcr
https://content.pivotal.io/slides/cloud-foundry-container-runtime-cfcr-production-kubernetes
http://engineering.pivotal.io/post/deploy-kubernetes-cfcr/

---

Deploy PKS

### What?

Deploy the Pivotal flavored Kubernetes with the aide of BOSH and Ops Manager

### Caveat
You will need to prepare Ops Manager on GCP differently than you prepare it for PAS.

### Visualizing the Architecture
![pks-architecture](https://docs.pivotal.io/runtimes/pks/1-1/images/pks-overview.png)

Summary of steps
1. Setup Ops Manager and deploy BOSH Director.
2. Partially setup PKS API Load Balancer.
3. Upload PKS tile, configure the tile, and deploy PKS Control Plane VM with some chosen API wildcard domain.
4. After PKS tile is deployed, update the PKS API load balancer with the IP address of the control plane VM that BOSH deployed on GCP.
5. Use `pks` CLI to deploy cluster
6. Use `kubectl` to deploy workload on cluster

You can find very detailed steps to setup everything on GCP [here](https://docs.pivotal.io/runtimes/pks/1-1/gcp.html).

### Expected Results
- Setup Ops Manager on GCP
- Configure and deploy PKS tile on Ops Manager
- Use `pks` CLI to create cluster
- Use `kubectl` CLI to deploy workload on cluster

### Resources
- https://pivotal.io/platform/pivotal-container-service
- PCF documentation on PKS: https://docs.pivotal.io/runtimes/pks/1-1/
- Installing pks CLI: https://docs.pivotal.io/runtimes/pks/1-1/installing-pks-cli.html
- Using pks CLI: https://docs.pivotal.io/runtimes/pks/1-1/configure-api.html
- Installing kubectl CLI: https://docs.pivotal.io/runtimes/pks/1-1/installing-kubectl-cli.html

---

Diego cell tunning

### What?
Did you know you could tune up or down Diego cells and affect placement and performance? The platform will allow you to do such things as:
1. overcommiting on memory resources
1. enable or disable end to end encryption between your app and the router (aka route integrity )
1. tune the amount of extra memory that is allocated to a user's container, to allow for such things as envoy and other sidecar processes
1. and more...

### Result
Explore the different knobs that are offered on the Diego BOSH release.

---

[RELEASE] End of week projects, minimal instruction ⇧
